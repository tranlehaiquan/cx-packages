/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/features": {
    /** Retrieves the status of feature flags of the tenant associated with the token. */
    get: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlagsResult"];
          };
        };
      };
    };
  };
  "/features/subscribe": {
    /** A websocket endpoint that streams feature flags when they change. Returns the current feature flags on connect. */
    get: {
      responses: {
        /** Websocket connection succeeded */
        101: {
          content: {
            "*/*": components["schemas"]["FeatureFlags"];
          };
        };
      };
    };
  };
  "/features/description": {
    /** Retrieves the status of feature flags along with their descriptions and type. */
    get: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": {
              result?: components["schemas"]["FeatureFlagsWithDescriptions"];
            };
          };
        };
      };
    };
  };
  "/features/{tenant_id}": {
    /** Retrieves the status of feature flags for the provided tenant */
    get: {
      parameters: {
        path: {
          /** ID of the tenant */
          tenant_id: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["FeatureFlagsResult"];
          };
        };
      };
    };
  };
  "/features/descriptions/{tenant_id}": {
    /** Retrieves the status of feature flags along with their descriptions and type of the provided tenant. */
    get: {
      parameters: {
        path: {
          /** ID of the tenant */
          tenant_id: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": {
              result?: components["schemas"]["FeatureFlagsWithDescriptions"];
            };
          };
        };
      };
    };
  };
  "/features/tenants/search": {
    /** Retrieves the status of feature flags for all the provided Tenant ID's. */
    post: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TenantFeatureFlagsResultContainer"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TenantIds"];
        };
      };
    };
  };
  "/features/descriptions/tenants/search": {
    /** Retrieves the status of feature flags along with their descriptions and type for all the provided Tenant ID's. */
    post: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["TenantFeatureFlagsAndDescriptionsResultContainer"];
          };
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["TenantIds"];
        };
      };
    };
  };
  "/org_preference": {
    /** Retrieves all org preferences. */
    get: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["ResultOkOrgPreferences"];
          };
        };
        /** Not authorized */
        401: unknown;
        /** Tenant not initialized on this service. */
        412: unknown;
      };
    };
    /** Update a subset of org preferences. */
    post: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["ResultOkOrgPreferences"];
          };
        };
        /** Not authorized */
        401: unknown;
        /** Tenant not initialized on this service. */
        412: unknown;
      };
      /** The org preferences to update. If a value is null then it is either removed or reset to its default value. If a value is not present then it will be unchanged. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["OptOrgPreferences"];
        };
      };
    };
  };
  "/internal/org_preference/{tenant_id}": {
    /** Retrieves all org preferences for a tenant. */
    get: {
      parameters: {
        path: {
          /** ID of the tenant */
          tenant_id: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["ResultOkOrgPreferences"];
          };
        };
        /** Not authorized */
        401: unknown;
      };
    };
    /** Update a subset of org preferences for a tenant. */
    post: {
      parameters: {
        path: {
          /** ID of the tenant */
          tenant_id: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": components["schemas"]["ResultOkOrgPreferences"];
          };
        };
        /** Not authorized */
        401: unknown;
      };
      /** The org preferences to update. If a value is null then it is either removed or reset to its default value. If a value is not present then it will be unchanged. */
      requestBody: {
        content: {
          "application/json": components["schemas"]["OptOrgPreferences"];
        };
      };
    };
  };
  "/internal/org_preferences": {
    /** Fetch all tenants that have an org preference with the given key and value. Note that the tenant must have set the value so this endpoint is only useful for looking up non-default values. */
    post: {
      responses: {
        /** Successful operation */
        200: {
          content: {
            "application/json": {
              result: {
                tenantId: string;
                orgId?: string;
                name?: string;
                description?: string;
              }[];
            };
          };
        };
        /** Not authorized */
        401: unknown;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["OrgPreference"];
        };
      };
    };
  };
  "/calendar": {
    /** Retrieves all calendar configurations. */
    get: operations["getCalendarConfigs"];
    /** Registers new calendar configs, and updates existing configs using the 'jobType' field as the key. Returns the created and updated calendar configs. */
    post: operations["createOrUpdateCalendarConfigs"];
  };
  "/timeslot": {
    /** Retrieves all tagged timeslots. */
    get: operations["getTimeslots"];
    /**
     * Returns the registered timeslots, now tagged with IDs
     *
     *
     * The possible 400 errors are as follows:
     *
     * - 'empty_input: list is empty'
     * - 'end_before_start: input is invalid, endTime must be after startTime'
     * - 'duplicate_input: input contains duplicates'
     *
     *
     * The possible 409 errors are as follows:
     *
     * - 'overlap_error: input will cause timeslot overlaps'
     * - 'duplicate_timeslot_error: timeslots are in an inconsistent state'.
     */
    post: operations["createOrUpdateTimeSlots"];
    /** Deletes all timeslots that have IDs contained within the provided list. Returns the number of timeslots deleted. */
    delete: operations["deleteTimeslot"];
  };
  "/preference": {
    /** The mappings are stored in a singular JSON object, with values of aribitrary JSON. */
    get: operations["getPreferences"];
    /**
     * For each key-value pair in the provided object, creates or updates existing key-value mappings.
     * The values may be aribtrary JSON.
     */
    post: operations["createOrUpdatePreferences"];
  };
  "/templates/{schemaName}": {
    /** Fetch all templates for a given schema. */
    get: operations["getTemplates"];
  };
  "/template": {
    /** Create a new template. */
    post: operations["createTemplate"];
  };
  "/template/{template_id}": {
    /** Update an existing template. */
    put: operations["updateTemplate"];
    /** Delete a template. */
    delete: operations["deleteTemplate"];
  };
  "/template/{template_id}/values": {
    /** Return template values for a template. */
    get: operations["getValuePairs"];
    /** All existing values will removed and the values provided will be inserted. */
    put: operations["overrideTemplateValues"];
  };
  "/config/layout/{object}": {
    /** Returns the default layout for the given object. */
    get: operations["layoutObjectDefault"];
  };
}

export interface components {
  schemas: {
    ResultDeletedInteger: {
      /** Format: int32 */
      deleted: number;
    };
    CalendarResponse: {
      jobType: string;
      /** Format: int32 */
      duration: number;
    };
    ResultOkListCalendarResponse: {
      result: components["schemas"]["CalendarResponse"][];
    };
    ResultCreatedListCalendarResponse: {
      created: components["schemas"]["CalendarResponse"][];
    };
    CompleteTimeSlot: {
      id: string;
      jobtype: string;
      /** @enum {string} */
      dayOfWeek: "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN";
      startTime: string;
      endTime: string;
    };
    ResultOkListCompleteTimeSlot: {
      result: components["schemas"]["CompleteTimeSlot"][];
    };
    Timeslot: {
      jobType: string;
      /** @enum {string} */
      dayOfWeek: "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT" | "SUN";
    };
    JSON: { [key: string]: unknown };
    ResultOkMapStringJSON: {
      result: { [key: string]: components["schemas"]["JSON"] };
    };
    ResultCreatedMapStringJSON: {
      created: { [key: string]: components["schemas"]["JSON"] };
    };
    /** @description Result wrapper for FeatureFlags. */
    FeatureFlagsResult: {
      result: components["schemas"]["FeatureFlags"];
    };
    /** @description Result wrapper for Tenant FeatureFlags. */
    TenantFeatureFlagsResultContainer: {
      result: components["schemas"]["TenantFeatureFlagsResult"];
    };
    /** @description Result wrapper for Tenant FeatureFlags successes and failures. */
    TenantFeatureFlagsResult: {
      successes: components["schemas"]["TenantsFeatureFlagsSuccesses"];
      failures: components["schemas"]["TenantsFeatureFlagsFailures"];
    };
    /** @description Result wrapper for Tenant FeatureFlags with descriptions. */
    TenantFeatureFlagsAndDescriptionsResultContainer: {
      result: components["schemas"]["TenantFeatureFlagsAndDescriptionResult"];
    };
    /** @description Result wrapper for Tenant FeatureFlags successes and failures. */
    TenantFeatureFlagsAndDescriptionResult: {
      successes: components["schemas"]["TenantsFeatureFlagsAndDescriptionsSuccesses"];
      failures: components["schemas"]["TenantsFeatureFlagsFailures"];
    };
    /** @description A map of the tenantId to the Features flags for all tenants that feature flags were able to be obtained */
    TenantsFeatureFlagsSuccesses: {
      [key: string]: components["schemas"]["FeatureFlags"];
    };
    /** @description A map of the tenantId to the Features flags for all tenants that feature flags were able to be obtained */
    TenantsFeatureFlagsAndDescriptionsSuccesses: {
      [key: string]: components["schemas"]["FeatureFlagsWithDescriptions"][];
    };
    /**
     * @description A map of the tenantId to an error message for all tenants that feature flags were not able to be obtained.
     * @example {
     *   "sk_123oiusdf": "Tenant sk_123oiusdf has not been initialized with this service. Please run the onboarding process for this tenant!",
     *   "sk_3432423524": "Tenant sk_3432423524 has not been initialized with this service. Please run the onboarding process for this tenant!"
     * }
     */
    TenantsFeatureFlagsFailures: { [key: string]: string };
    /** @description No assumptions should be made about specific keys appearing in the response. If a key is not returned its value should be assumed to be false. */
    FeatureFlags: {
      /**
       * @description Internal use only. Do not use.
       * @default false
       */
      substituteJobAllocationTimes?: boolean;
      /**
       * @description Whether SkedX should switch classic users to use phoenix backend.
       * @default false
       */
      usePhoenixBackend?: boolean;
      /**
       * @description Whether to prevent users from using Skedulo Html5 mobile app
       * @default false
       */
      disableHtml5App?: boolean;
      /**
       * @description Whether to prevent users of this org from using the Classic web app.
       * @default false
       */
      disableClassicWebApp?: boolean;
      /**
       * @description Whether resource requirements should be enabled in the frontend.
       * @default false
       */
      useResourceRequirements?: boolean;
      /**
       * @description Whether temporary regions should be enabled in the frontend.
       * @default false
       */
      useTemporaryRegions?: boolean;
      /**
       * @description Whether job offers should be enabled in the frontend.
       * @default true
       */
      useJobOffers?: boolean;
      /**
       * @description Whether shift offers should be enabled in the frontend.
       * @default true
       */
      useShiftOffers?: boolean;
      /**
       * @description Whether the new global nagivation at the top of the web app should be turned on.
       * @default true
       */
      useGlobalNavigation?: boolean;
      /**
       * @description Whether we forward web app events for this org to LogRocket.
       * @default false
       */
      captureLogRocketEvents?: boolean;
      /**
       * @description Enable permissions to determine what UI elements are displayed or accessible.
       * @default false
       */
      enableUIPermissionsCheck?: boolean;
      /**
       * @description Whether availability patterns or the old availability templates should be enabled in the frontend.
       * @default false
       */
      useAvailabilityPatterns?: boolean;
      /**
       * @description Whether triggered actions should be enabled in the frontend.
       * @default false
       */
      useTriggeredActions?: boolean;
      /**
       * @description Whether the new exceptions console page appears in the menu.
       * @default false
       */
      useExceptionsConsole?: boolean;
      /**
       * @description Whether the new related object tabs appear in a record page.
       * @default false
       */
      useRelatedObjects?: boolean;
      /**
       * @description Enable checking of permissions during Standalone Driver calls.
       * @default true
       */
      checkStandaloneDriverPermissions?: boolean;
      /**
       * @description Whether optimization (premium service) is enabled in the product.
       * @default true
       */
      useOptimization?: boolean;
      /**
       * @description Whether messaging functionality is enabled
       * @default false
       */
      useMessaging?: boolean;
      /**
       * @description Whether schedule templates are enabled
       * @default false
       */
      useScheduleTemplates?: boolean;
      /**
       * @description Whether to use the native job details view
       * @default false
       */
      useJobDetailsNative?: boolean;
      /**
       * @description Use asynchronous optimizations when scheduling
       * @default false
       */
      useAsyncOptimization?: boolean;
      /**
       * @description Use V2 change events for webhooks and triggered actions so that any object type can be tracked.
       * @default false
       */
      useChangeEventsV2?: boolean;
      /**
       * @description Whether the grid view is enabled
       * @default false
       */
      useGridView?: boolean;
      /**
       * @description Enables new data driven UI capabilities
       * @default false
       */
      enablePlatformUI?: boolean;
      /**
       * @description Whether exception reporting is enabled in the backend.
       * @default false
       */
      enableExceptionReporting?: boolean;
      /**
       * @description Whether Availability Change Events are generated in the backend.
       * @default false
       */
      enableAvailabilityChangeEvents?: boolean;
      /**
       * @description Enable data loading settings page
       * @default false
       */
      useDataLoading?: boolean;
      /**
       * @description Enable packaging settings page
       * @default false
       */
      usePackaging?: boolean;
      /**
       * @description (Beta) Enable the new permission management features
       * @default false
       */
      useNewPermissions?: boolean;
      /**
       * @description (Development) Use record access policies to control access to data records (Skedulo Platform only)
       * @default false
       */
      useRecordAccessPolicies?: boolean;
      /**
       * @description Use the standalone notification services (in development). Only work for mobile app v3.
       * @default false
       */
      useNotificationV3?: boolean;
      /**
       * @description Whether it is possible to store the recurring schedule pattern.
       * @default false
       */
      recurringSchedulePattern?: boolean;
      /**
       * @description Whether account and contact changes are emitted.
       * @default false
       */
      accountContactChanges?: boolean;
      /**
       * @description Whether the driver supports performing upserts.
       * @default false
       */
      driverUpsertSupport?: boolean;
      /**
       * @description Whether the CopiedFromId field on Jobs, Shifts and Activities is available.
       * @default false
       */
      copyScheduleCopiedFrom?: boolean;
      /**
       * @description Whether virtual meeting fields are available on Jobs.
       * @default false
       */
      virtualMeetings?: boolean;
      /**
       * @description Whether schedule template objects and fields are available.
       * @default false
       */
      scheduleTemplates?: boolean;
      /**
       * @description Whether v2 change events are supported.
       * @default false
       */
      changeEventsV2?: boolean;
      /**
       * @description Whether job dependencies are supported.
       * @default false
       */
      jobDependencies?: boolean;
      /**
       * @description Whether user region objects and fields are available.
       * @default false
       */
      userRegions?: boolean;
    };
    /** @description A list of Feature flags with descriptions type and value. */
    FeatureFlagsWithDescriptions: {
      /** @description The feature flag key. */
      name?: string;
      /** @description Description of the flag. */
      description?: string;
      /**
       * @description Type of flag.
       * @enum {string}
       */
      type?: "Feature" | "Package" | "Retired";
      /** @description value of the flag. */
      value?: boolean;
    }[];
    ResultOkOrgPreferences: {
      result: components["schemas"]["OrgPreferences"];
    };
    OrgPreference: {
      key: string;
      value: string;
    };
    /** @description Tenant Ids */
    TenantIds: string[];
    OrgPreferences: {
      /** @default false */
      allowAbortJob: boolean;
      /** @default false */
      attachmentsDownload: boolean;
      /** @default false */
      enableHIPAACompliance: boolean;
      /**
       * Format: int32
       * @default 0
       */
      futureJobBuffer: number;
      /** @default false */
      jobTasksAreOptional: boolean;
      /** @default true */
      enableCompletionNotes?: boolean;
      /** @default false */
      popupCompletionNotes: boolean;
      /** @default false */
      turnOnChatter: boolean;
      /** @default false */
      saveAttachmentAsFile: boolean;
      /** @default true */
      enableSMSResponse: boolean;
      /** @default true */
      allowJobsToBeDeclined: boolean;
      /**
       * @description If true jobs are allocated to a resource in confirmed status, otherwise in dispatched status.
       * @default false
       */
      dispatchJobsToConfirmedStatus: boolean;
      /** @default false */
      disableEnRoute: boolean;
      /** @default false */
      disableOnSite: boolean;
      /** @default true */
      restrictResourcesFromWebApp: boolean;
      /** @default false */
      excludePendingDispatchAllocationsInICal: boolean;
      /** @default false */
      preventSchedulersFromCreatingJobs: boolean;
      /** @default false */
      enableShifts: boolean;
      /** @default false */
      autoApproveAvailabilities: boolean;
      /** @default false */
      autoDeleteJobAllocations: boolean;
      /** @default false */
      autoAllocateJobOffers: boolean;
      /** @default false */
      autoAllocateShiftOffers: boolean;
      /** @default false */
      notifyExpiredOffers: boolean;
      /** @default false */
      enableJobSwap: boolean;
      /** @default false */
      teamLeader: boolean;
      /** @default false */
      enableFilterJobsByTimeConstraints: boolean;
      labels: components["schemas"]["OrgPreferenceLabels"];
      mobile: components["schemas"]["MobileOrgPreferences"];
      mobileV3: components["schemas"]["MobileV3OrgPreferences"];
      web: components["schemas"]["WebOrgPreferences"];
      services: components["schemas"]["ServiceOrgPreferences"];
      notifications?: components["schemas"]["NotificationOrgPreferences"];
      messaging?: components["schemas"]["MessagingOrgPreferences"];
      exceptionReporting: components["schemas"]["ExceptionReportingOrgPreferences"];
      visualforce: components["schemas"]["VisualforceOrgPreferences"];
    };
    OrgPreferenceLabels: {
      jobs: components["schemas"]["JobActionLabels"];
      menu: components["schemas"]["MenuLabels"];
    };
    JobActionLabels: {
      confirm?: string;
      decline?: string;
      startTravel?: string;
      checkIn?: string;
      inProgress?: string;
      complete?: string;
      abortJob?: string;
      createFollowUp?: string;
      manageTimes?: string;
      completionNotes?: string;
    };
    MenuLabels: {
      customForms?: string;
    };
    /** @description Preference settings for Mobile. Also returns any custom values. */
    MobileOrgPreferences: {
      /** @default false */
      allowManagementOfAvailabilities: boolean;
      /** @default true */
      allowManagementOfUnavailabilities: boolean;
      /** @default false */
      allowAutomaticRefreshOfJobs: boolean;
      /**
       * @description Deprecated, use enableCreateActivity and enableDeleteActivity instead.
       * @default false
       */
      allowManagementOfActivities: boolean;
      /** @default true */
      enableCreateActivity: boolean;
      /** @default true */
      enableDeleteActivity: boolean;
      /** @default false */
      completedJobsAreReadonlyOnMobile: boolean;
      /** @default false */
      enableCreateJob: boolean;
      /**
       * @description Prevent resources from changing job status timestamps.
       * @default true
       */
      enableManageTimes: boolean;
      /** @default false */
      enableProximityNotifications: boolean;
      /** @default support@skedulo.com */
      supportEmail: string;
      /** @default true */
      enableFollowups: boolean;
      /** @default true */
      enableFollowupAssignToSelf: boolean;
      /**
       * @description Number of days in the past for which availability should be loaded in the agenda view.
       * @default 90
       */
      preloadAvailabilityRangeMinDays: number;
      /**
       * @description Number of days in the future for which availability should be loaded in the agenda view.
       * @default 180
       */
      preloadAvailabilityRangeMaxDays: number;
      /**
       * @description Number of days in the past for which jobs should be loaded in the agenda view.
       * @default 90
       */
      preloadJobRangeMinDays: number;
      /**
       * @description Number of days in the future for which jobs should be loaded in the agenda view.
       * @default 90
       */
      preloadJobRangeMaxDays: number;
      android: components["schemas"]["MobileAndroidOrgPreferences"];
      ios: components["schemas"]["MobileIOSOrgPreferences"];
      jobOfferCardContent: components["schemas"]["JobOfferCardContentPreferences"];
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    MobileAndroidOrgPreferences: {
      version?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    MobileIOSOrgPreferences: {
      version?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Provides overrides for fields for which values can be determined for a job offer */
    JobOfferCardContentPreferences: {
      /** @example AccountId */
      addressFieldOverride?: string;
      /** @example DescCustomField */
      descriptionFieldOverride?: string;
      /** @example AccountustomField */
      accountFieldOverride?: string;
    };
    /** @description Preference settings for Mobile v3. Also returns any custom values. */
    MobileV3OrgPreferences: {
      /** @example com.skedulo.app.v3 */
      appBundleId?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    WebOrgPreferences: { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    ServiceOrgPreferences: {
      vendorApiKey?: string;
      /** @enum {string} */
      mapVendor?: "GOOGLE" | "GRAPHHOPPER";
    } & { [key: string]: components["schemas"]["JSON"] };
    NotificationOrgPreferences: {
      enabled: components["schemas"]["EnabledNotifications"];
      automatic: components["schemas"]["AutomaticNotifications"];
    };
    MessagingOrgPreferences: {
      enableAllUsers?: boolean;
      enableDirectMessages?: boolean;
      enableEditMessages?: boolean;
      enableDeleteMessages?: boolean;
      enableResourcesAddMembersToChannel?: boolean;
      enableResourcesCreatePublicChannels?: boolean;
      enableResourcesCreatePrivateChannels?: boolean;
      enableResourcesCreateDirectChannels?: boolean;
    };
    /** @description Controls whether notifications are sent when a user calls an endpoint or via events if event notifications have also been enabled. */
    EnabledNotifications: {
      job: components["schemas"]["EnabledJobNotifications"];
    };
    EnabledJobNotifications: {
      /**
       * @description If true then a notification is sent to the resource when they are dispatched via the dispatch endpoint.
       * @default true
       */
      dispatch: boolean;
      /**
       * @description If true then a notification is sent to the resource if they are re-dispatched via the dispatch/notify endpoint.
       * @default true
       */
      reminder: boolean;
      /**
       * @description If true then a notification is sent to the resource if the notify_cancel endpoint is called or if automatic resource job events are enabled and a job they are allocated to is cancelled.
       * @default true
       */
      cancelled: boolean;
      /**
       * @description If true then a notifications for job offers are sent to resources.
       * @default true
       */
      offer: boolean;
    };
    /** @description Controls whether notifications are sent in response to object changes. */
    AutomaticNotifications: {
      resource: components["schemas"]["ResourceAutomaticNotifications"];
    };
    ResourceAutomaticNotifications: {
      /**
       * @description If true then automatic notifications based on job changes can be sent to resources.
       * @default false
       */
      job: boolean;
      /**
       * @description If true then automatic notifications based on shift changes can be sent to resources.
       * @default false
       */
      shift: boolean;
    };
    ExceptionReportingOrgPreferences: {
      insufficientTravelTime: components["schemas"]["InsufficientTravelTimeOrgPreferences"];
    };
    InsufficientTravelTimeOrgPreferences: {
      /** @description Determines whether to generate insufficient travel time exceptions */
      enabled: boolean;
      /**
       * Format: int32
       * @description Raise an exception if the travel time in minutes between two work items is greater than this value
       */
      maxTravelTimeInMinutes: number;
    };
    VisualforceOrgPreferences: {
      /** @description Visualforce items that are shown on the job details screen. */
      jobItems: components["schemas"]["VisualforceLink"][];
      /** @description Visualforce items that are shown on the hamburger menu. */
      menuItems: components["schemas"]["VisualforceLink"][];
      /** @description The name of a Visualforce page in Salesforce that is shown on the job details screen. This field is deprecated, use `jobItems` instead. */
      nameFromJob?: string;
      /** @description The label used for the job details Visualforce page. This field is deprecated, use `jobItems` instead. */
      labelFromJob?: string;
      /** @description The name of a Visualforce page in Salesforce that is shown on the hamburger menu. This field is deprecated, use `menuItems` instead. */
      nameFromMenu?: string;
      /** @description The label used for the hamburger menu Visualforce page. This field is deprecated, use `menuItems` instead. */
      labelFromMenu?: string;
    };
    VisualforceLink: {
      /** @description The name of a Visualforce page in Salesforce. */
      name?: string;
      /** @description The label used when displaying a link to the Visualforce page. */
      label?: string;
    };
    OptOrgPreferences: {
      allowAbortJob?: boolean;
      attachmentsDownload?: boolean;
      enableHIPAACompliance?: boolean;
      /** Format: int32 */
      futureJobBuffer?: number;
      jobTasksAreOptional?: boolean;
      enableCompletionNotes?: boolean;
      popupCompletionNotes?: boolean;
      turnOnChatter?: boolean;
      saveAttachmentAsFile?: boolean;
      enableSMSResponse?: boolean;
      allowJobsToBeDeclined?: boolean;
      dispatchJobsToConfirmedStatus?: boolean;
      disableEnRoute?: boolean;
      disableOnSite?: boolean;
      restrictResourcesFromWebApp?: boolean;
      excludePendingDispatchAllocationsInICal?: boolean;
      /** @default false */
      preventSchedulersFromCreatingJobs?: boolean;
      enableShifts?: boolean;
      autoApproveAvailabilities?: boolean;
      autoDeleteJobAllocations?: boolean;
      autoAllocateJobOffers?: boolean;
      autoAllocateShiftOffers?: boolean;
      notifyExpiredOffers?: boolean;
      enableJobSwap?: boolean;
      teamLeader?: boolean;
      enableFilterJobsByTimeConstraints?: boolean;
      labels?: components["schemas"]["OptOrgPreferenceLabels"];
      mobile?: components["schemas"]["OptMobileOrgPreferences"];
      mobileV3?: components["schemas"]["OptMobileV3OrgPreferences"];
      web?: components["schemas"]["OptWebOrgPreferences"];
      services?: components["schemas"]["OptServiceOrgPreferences"];
      notifications?: components["schemas"]["OptNotificationOrgPreferences"];
      exceptionReporting?: components["schemas"]["OptExceptionReportingOrgPreferences"];
      visualforce?: components["schemas"]["OptVisualforceOrgPreferences"];
    };
    OptOrgPreferenceLabels: {
      jobs?: components["schemas"]["OptJobActionLabels"];
      menu?: components["schemas"]["OptMenuLabels"];
    };
    OptJobActionLabels: {
      confirm?: string;
      decline?: string;
      startTravel?: string;
      checkIn?: string;
      inProgress?: string;
      complete?: string;
      abortJob?: string;
      createFollowUp?: string;
      manageTimes?: string;
      completionNotes?: string;
    };
    OptMenuLabels: {
      customForms?: string;
    };
    /** @description Also allows custom fields */
    OptMobileOrgPreferences: {
      allowManagementOfAvailabilities?: boolean;
      allowManagementOfUnavailabilities?: boolean;
      allowAutomaticRefreshOfJobs?: boolean;
      /** @description Deprecated, use enableCreateActivity and enableDeleteActivity instead. */
      allowManagementOfActivities?: boolean;
      enableCreateActivity?: boolean;
      enableDeleteActivity?: boolean;
      completedJobsAreReadonlyOnMobile?: boolean;
      enableCreateJob?: boolean;
      /** @description Prevent resources from changing job status timestamps. */
      enableManageTimes?: boolean;
      enableProximityNotifications?: boolean;
      supportEmail?: string;
      enableFollowups?: boolean;
      enableFollowupAssignToSelf?: boolean;
      /** @description Number of days in the past for which availability should be loaded in the agenda view. */
      preloadAvailabilityRangeMinDays?: number;
      /** @description Number of days in the future for which availability should be loaded in the agenda view. */
      preloadAvailabilityRangeMaxDays?: number;
      /** @description Number of days in the past for which jobs should be loaded in the agenda view. */
      preloadJobRangeMinDays?: number;
      /** @description Number of days in the future for which jobs should be loaded in the agenda view. */
      preloadJobRangeMaxDays?: number;
      android?: components["schemas"]["OptMobileAndroidOrgPreferences"];
      mobile?: components["schemas"]["OptMobileIOSOrgPreferences"];
      jobOfferCardContent?: components["schemas"]["OptJobOfferCardContentPreferences"];
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    OptMobileAndroidOrgPreferences: {
      version?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    OptMobileIOSOrgPreferences: {
      version?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Fields related to the Mobile V3 App */
    OptMobileV3OrgPreferences: {
      /** @example com.skedulo.app.v3 */
      appBundleId?: string;
    } & { [key: string]: components["schemas"]["JSON"] };
    /** @description Provides overrides for fields for which values can be determined for a job offer */
    OptJobOfferCardContentPreferences: {
      addressFieldOverride?: string;
      descriptionFieldOverride?: string;
      accountFieldOverride?: string;
    };
    /** @description Also allows custom fields. */
    OptWebOrgPreferences: { [key: string]: components["schemas"]["JSON"] };
    /** @description Also returns any custom values. */
    OptServiceOrgPreferences: {
      vendorApiKey?: string;
      /** @enum {string} */
      mapVendor?: "GOOGLE" | "GRAPHHOPPER";
    } & { [key: string]: components["schemas"]["JSON"] };
    OptNotificationOrgPreferences: {
      enabled?: components["schemas"]["OptEnabledNotifications"];
      automatic?: components["schemas"]["OptAutomaticNotifications"];
    };
    OptEnabledNotifications: {
      job?: components["schemas"]["OptJobEnabledNotifications"];
    };
    OptJobEnabledNotifications: {
      /** @description If true then a notification is sent to the resource when they are dispatched. */
      dispatch?: boolean;
      /** @description If true then a notification is sent to the resource if they are re-dispatched. */
      reminder?: boolean;
      /** @description If true then a notification is sent to the resource if a job they are allocated to is cancelled. */
      cancelled?: boolean;
    };
    OptAutomaticNotifications: {
      resource?: components["schemas"]["OptResourceAutomaticNotifications"];
    };
    OptResourceAutomaticNotifications: {
      /** @description If true then automatic notifications based on job changes can be sent to resources. */
      job?: boolean;
      /** @description If true then automatic notifications based on shift changes can be sent to resources. */
      shift?: boolean;
    };
    OptExceptionReportingOrgPreferences: {
      insufficientTravelTime?: components["schemas"]["OptInsufficientTravelTimeOrgPreferences"];
    };
    OptInsufficientTravelTimeOrgPreferences: {
      /** @description Determines whether to generate insufficient travel time exceptions */
      enabled?: boolean;
      /**
       * Format: int32
       * @description Raise an exception if the travel time in minutes between two work items is greater than this value
       */
      maxTravelTimeInMinutes?: number;
    };
    OptVisualforceOrgPreferences: {
      /** @description Visualforce items that are shown on the job details screen. */
      jobItems?: components["schemas"]["VisualforceLink"][];
      /** @description Visualforce items that are shown on the hamburger menu. */
      menuItems?: components["schemas"]["VisualforceLink"][];
      /** @description The name of a Visualforce page in Salesforce that is shown on the job details screen. This field is deprecated, use `jobItems` instead. */
      nameFromJob?: string;
      /** @description The label used for the job details Visualforce page. This field is deprecated, use `jobItems` instead. */
      labelFromJob?: string;
      /** @description The name of a Visualforce page in Salesforce that is shown on the hamburger menu. This field is deprecated, use `menuItems` instead. */
      nameFromMenu?: string;
      /** @description The label used for the hamburger menu Visualforce page. This field is deprecated, use `menuItems` instead. */
      labelFromMenu?: string;
    };
    ResultOKTemplates: {
      result?: components["schemas"]["Template"][];
    };
    ResultOKCreateTemplate: {
      result?: components["schemas"]["Template"][];
    };
    ResultOKDeleteTemplate: {
      deleted?: components["schemas"]["TemplateId"];
    };
    Template: {
      id: components["schemas"]["TemplateId"];
      name: string;
      schemaName: string;
    };
    NewTemplate: {
      name: string;
      schemaName: string;
    };
    UpdateTemplate: {
      name: string;
    };
    ResultOKTemplateValues: {
      result?: components["schemas"]["TemplateValue"][];
    };
    TemplateValue: {
      id: components["schemas"]["TemplateValueId"];
      templateId: components["schemas"]["TemplateId"];
      rel: string;
      field: string;
      value: string;
    };
    NewTemplateValue: {
      rel: string;
      field: string;
      value: string;
    };
    /** Format: uuid */
    TemplateId: string;
    /** Format: uuid */
    TemplateValueId: string;
    Layout: {
      relatedData: components["schemas"]["LayoutRelatedData"][];
    };
    LayoutRelatedData: components["schemas"]["LayoutRelatedDataRelatedObject"];
    LayoutRelatedDataRelatedObject: {
      /** @enum {string} */
      type: "relatedObjects";
      reference?: string;
      object: string;
      label?: string;
      listFields?: components["schemas"]["LayoutRelatedDataRelatedObjectField"][];
    };
    LayoutRelatedDataRelatedObjectField: {
      fieldName: string;
    };
    Error: {
      errorType: string;
      message: string;
      errorId?: string;
    };
  };
}

export interface operations {
  /** Retrieves all calendar configurations. */
  getCalendarConfigs: {
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOkListCalendarResponse"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
  };
  /** Registers new calendar configs, and updates existing configs using the 'jobType' field as the key. Returns the created and updated calendar configs. */
  createOrUpdateCalendarConfigs: {
    responses: {
      /** Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["ResultCreatedListCalendarResponse"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CalendarResponse"][];
      };
    };
  };
  /** Retrieves all tagged timeslots. */
  getTimeslots: {
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOkListCompleteTimeSlot"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
  };
  /**
   * Returns the registered timeslots, now tagged with IDs
   *
   *
   * The possible 400 errors are as follows:
   *
   * - 'empty_input: list is empty'
   * - 'end_before_start: input is invalid, endTime must be after startTime'
   * - 'duplicate_input: input contains duplicates'
   *
   *
   * The possible 409 errors are as follows:
   *
   * - 'overlap_error: input will cause timeslot overlaps'
   * - 'duplicate_timeslot_error: timeslots are in an inconsistent state'.
   */
  createOrUpdateTimeSlots: {
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOkListCompleteTimeSlot"];
        };
      };
      /** See above */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** See above */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Tenant not initialized on this service. */
      412: unknown;
    };
    /** The list of untagged timeslots */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Timeslot"][];
      };
    };
  };
  /** Deletes all timeslots that have IDs contained within the provided list. Returns the number of timeslots deleted. */
  deleteTimeslot: {
    parameters: {
      query: {
        /** IDs of Timeslots to delete, separated by commas */
        ids: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultDeletedInteger"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
  };
  /** The mappings are stored in a singular JSON object, with values of aribitrary JSON. */
  getPreferences: {
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOkMapStringJSON"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
  };
  /**
   * For each key-value pair in the provided object, creates or updates existing key-value mappings.
   * The values may be aribtrary JSON.
   */
  createOrUpdatePreferences: {
    responses: {
      /** Successful operation */
      201: {
        content: {
          "application/json": components["schemas"]["ResultCreatedMapStringJSON"];
        };
      };
      /** Not authorized */
      401: unknown;
      /** Tenant not initialized on this service. */
      412: unknown;
    };
    /** An object of key-value mappings. */
    requestBody: {
      content: {
        "application/json": { [key: string]: components["schemas"]["JSON"] };
      };
    };
  };
  /** Fetch all templates for a given schema. */
  getTemplates: {
    parameters: {
      path: {
        /** Schema to retrieve templates for. */
        schemaName: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKTemplates"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Create a new template. */
  createTemplate: {
    responses: {
      /** The template was created. */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKCreateTemplate"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** New template details. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewTemplate"];
      };
    };
  };
  /** Update an existing template. */
  updateTemplate: {
    parameters: {
      path: {
        /** Identifier of the template to update. */
        template_id: string;
      };
    };
    responses: {
      /** The template was updated. */
      200: unknown;
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Updated template details. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTemplate"];
      };
    };
  };
  /** Delete a template. */
  deleteTemplate: {
    parameters: {
      path: {
        /** Identifier of the template to delete. */
        template_id: string;
      };
    };
    responses: {
      /** The template was deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKDeleteTemplate"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Return template values for a template. */
  getValuePairs: {
    parameters: {
      path: {
        /** Identifier of the template to retrieve values for. */
        template_id: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKTemplateValues"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** All existing values will removed and the values provided will be inserted. */
  overrideTemplateValues: {
    parameters: {
      path: {
        /** Identifier of the template to add values for. */
        template_id: string;
      };
    };
    responses: {
      /** The values were updated. */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKTemplateValues"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** Values to use for the template. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewTemplateValue"][];
      };
    };
  };
  /** Returns the default layout for the given object. */
  layoutObjectDefault: {
    parameters: {
      path: {
        /** the name of the object */
        object: string;
      };
    };
    responses: {
      /** Successful operation */
      200: {
        content: {
          "application/json": {
            result: {
              object: string;
              layout: components["schemas"]["Layout"];
            };
          };
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}

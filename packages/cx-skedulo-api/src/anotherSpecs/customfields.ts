/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/standard_schemas": {
    get: operations["standardSchemas"];
  };
  "/schemas": {
    get: operations["listSchemas"];
    post: operations["upsertSchemas"];
  };
  "/schema/{schemaId}": {
    delete: operations["deleteSchema"];
  };
  "/fields": {
    get: operations["listFields"];
    post: operations["upsertFields"];
  };
  "/field/{fieldId}": {
    delete: operations["deleteField"];
  };
  "/vocabularies": {
    get: operations["fetchVocabularies"];
  };
  "/metadata": {
    get: operations["fetchAllObjectMetadata"];
  };
  "/metadata/{mapping}": {
    get: operations["fetchObjectMetadata"];
  };
  "/permissions": {
    get: operations["fetchPermissions"];
  };
  "/vocabulary/{schemaName}/{fieldName}": {
    get: operations["vocabularyFetch"];
    /** You must be an administrator in order to use this endpoint */
    post: operations["vocabularyCreate"];
  };
  "/vocabulary/{schemaName}/{fieldName}/{value}": {
    /** You must be an administrator in order to use this endpoint */
    put: operations["vocabularyUpdate"];
    /** You must be an administrator in order to use this endpoint */
    delete: operations["vocabularyDeactivate"];
  };
  "/vocabulary/dependency": {
    /** You must be an administrator in order to use this endpoint */
    post: operations["upsertFieldDependency"];
  };
  "/vocabulary/dependency/delete": {
    /** You must be an administrator in order to use this endpoint */
    post: operations["deleteFieldDependency"];
  };
  "/vocabulary/dependency/entry": {
    /** You must be an administrator in order to use this endpoint */
    post: operations["addFieldDependencyEntry"];
  };
  "/vocabulary/dependency/entry/delete": {
    /** You must be an administrator in order to use this endpoint */
    post: operations["deleteFieldDependencyEntry"];
  };
  "/usermetadata": {
    /** Deprecated: use the /auth/metadata/user endpoint instead */
    get: operations["userMetadata"];
  };
  "/standalone/schemas": {
    post: operations["standaloneCreateSchema"];
  };
  "/standalone/schema/{schemaId}": {
    /** This will remove the schema along with all data contained within it */
    delete: operations["standaloneDeleteSchema"];
  };
  "/standalone/schema/{schemaId}/track": {
    /** Enable the tracking of row inserts, updates and deletes. Changes are available via GraphQL subscriptions and webhooks. */
    post: operations["standaloneTrackSchema"];
    /** Disable the tracking of row inserts, updates and deletes for a custom schema. */
    delete: operations["standaloneUntrackSchema"];
  };
  "/standalone/fields": {
    post: operations["standaloneCreateField"];
  };
  "/standalone/field/{fieldId}": {
    /** This will remove the field along with any data it contained */
    delete: operations["standaloneDeleteField"];
  };
}

export interface components {
  schemas: {
    CustomField: {
      /** Format: uuid */
      id: string;
      /** @description Internal name */
      name: string;
      /** @description The name of the schema this field belongs to */
      schemaName: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /** @enum {string} */
      fieldType:
        | "string"
        | "id"
        | "calculated"
        | "email"
        | "encryptedstring"
        | "reference"
        | "textarea"
        | "htmltextarea"
        | "combobox"
        | "multipicklist"
        | "picklist"
        | "phone"
        | "url"
        | "int"
        | "double"
        | "decimal"
        | "currency"
        | "percent"
        | "duration"
        | "time"
        | "date"
        | "datetime"
        | "boolean";
      /** @description The name of the field in the remote system (eg. sked__FieldName__c for Salesforce) */
      mapping: string;
      /** @description The name of the schema. Required if fieldType is reference. */
      referenceSchemaName?: string;
      /** @description The name of the field in the referenced schema. */
      referenceSchemaFieldName?: string;
      required: boolean;
      upsertKey: boolean;
      /** @enum {string} */
      accessMode: "read_only" | "read_write" | "insert_only";
      /** @description Deprecated in favor of 'accessMode' */
      readOnly: boolean;
      /** @description The maximum number of characters that are allowed. */
      maxLength?: number;
      /** @description The total number of digits that are allowed. For example, the number 123.45 has a precision of 5. */
      precision?: number;
      /** @description The number of digits to the right of the decimal point that are allowed. For example, the number 123.45 has a scale of 2. */
      scale?: number;
      /** @description Should this field be promoted and shown at the top? Only one field per schema can have this set. */
      isAlert: boolean;
      showIf?: string;
      showDesktop: boolean;
      showMobile: boolean;
      editableOnMobile: boolean;
      requiredOnMobile: boolean;
      displayOrder?: number;
    };
    CustomFieldInput: {
      /**
       * Format: uuid
       * @description If not provided a new field is created otherwise the field with the id is updated
       */
      id?: string;
      /** @description Internal name */
      name: string;
      /** @description The name of the schema this field belongs to */
      schemaName: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /** @enum {string} */
      fieldType:
        | "string"
        | "id"
        | "calculated"
        | "email"
        | "encryptedstring"
        | "reference"
        | "textarea"
        | "htmltextarea"
        | "combobox"
        | "multipicklist"
        | "picklist"
        | "phone"
        | "url"
        | "int"
        | "double"
        | "decimal"
        | "currency"
        | "percent"
        | "duration"
        | "time"
        | "date"
        | "datetime"
        | "boolean";
      /** @description The name of the field in the remote system (eg. sked__FieldName__c for Salesforce) */
      mapping: string;
      /** @description The name of the schema. Required if fieldType is reference. */
      referenceSchemaName?: string;
      /** @description The name of the field in the referenced schema. */
      referenceSchemaFieldName?: string;
      /** @default false */
      required?: boolean;
      /** @default false */
      upsertKey?: boolean;
      /**
       * @default read_write
       * @enum {string}
       */
      accessMode?: "read_only" | "read_write" | "insert_only";
      /**
       * @description Deprecated in favor of 'accessMode' and ignored if it is set.
       * @default false
       */
      readOnly?: boolean;
      /** @description The maximum number of characters that are allowed. */
      maxLength?: number;
      /** @description The total number of digits that are allowed. For example, the number 123.45 has a precision of 5. */
      precision?: number;
      /** @description The number of digits to the right of the decimal point that are allowed. For example, the number 123.45 has a scale of 2. */
      scale?: number;
      showIf?: string;
      /**
       * @description Should this field be promoted and shown at the top? Only one field per schema can have this set.
       * @default false
       */
      isAlert?: boolean;
      /** @default true */
      showDesktop?: boolean;
      /** @default false */
      showMobile?: boolean;
      /** @default false */
      editableOnMobile?: boolean;
      /** @default false */
      requiredOnMobile?: boolean;
      displayOrder?: number;
    };
    CustomSchema: {
      /** Format: uuid */
      id: string;
      /** @description Internal name */
      name: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      mapping: string;
    };
    CustomSchemaInput: {
      /**
       * Format: uuid
       * @description If not provided a new schema is created otherwise the schema with the id is updated
       */
      id?: string;
      /** @description Internal name */
      name: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      mapping: string;
    };
    NewStandaloneCustomSchema: {
      /** @description Internal name */
      name: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /** @description Fields to create at the same time as the object. These fields are allowed to be required and have no default as there is no data in the object yet. */
      fields?: components["schemas"]["NewStandaloneCustomSchemaField"][];
    };
    NewStandaloneCustomSchemaField: {
      /** @description Internal name */
      name: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /**
       * @default read_write
       * @enum {string}
       */
      accessMode?: "read_only" | "read_write" | "insert_only";
      column: components["schemas"]["NewStandaloneCustomFieldColumn"];
      showIf?: string;
      /**
       * @description Should this field be promoted and shown at the top? Only one field per schema can have this set.
       * @default false
       */
      isAlert?: boolean;
      /** @default true */
      showDesktop?: boolean;
      /** @default false */
      showMobile?: boolean;
      /** @default false */
      editableOnMobile?: boolean;
      /** @default false */
      requiredOnMobile?: boolean;
      displayOrder?: number;
    };
    NewStandaloneCustomField: {
      /** @description Internal name */
      name: string;
      /** @description The name of the schema this field belongs to */
      schemaName: string;
      /** @description Display name */
      label?: string;
      /** @description Description display only when modifying this fields definition */
      description?: string;
      /**
       * @default read_write
       * @enum {string}
       */
      accessMode?: "read_only" | "read_write" | "insert_only";
      column: components["schemas"]["NewStandaloneCustomFieldColumn"];
      showIf?: string;
      /**
       * @description Should this field be promoted and shown at the top? Only one field per schema can have this set.
       * @default false
       */
      isAlert?: boolean;
      /** @default true */
      showDesktop?: boolean;
      /** @default false */
      showMobile?: boolean;
      /** @default false */
      editableOnMobile?: boolean;
      /** @default false */
      requiredOnMobile?: boolean;
      displayOrder?: number;
    };
    NewStandaloneCustomFieldColumn: {
      /** @enum {string} */
      type:
        | "string"
        | "textarea"
        | "url"
        | "picklist"
        | "multipicklist"
        | "int"
        | "decimal"
        | "boolean"
        | "date"
        | "datetime"
        | "time"
        | "reference";
    };
    NewStandaloneCustomFieldColumnString: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @default false */
      unique?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /**
       * @description The maximum number of characters that are allowed.
       * @default 255
       */
      maxLength?: number;
    };
    NewStandaloneCustomFieldColumnTextArea: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /**
       * @description The maximum number of characters that are allowed.
       * @default 255
       */
      maxLength?: number;
    };
    NewStandaloneCustomFieldColumnUrl: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @default false */
      unique?: boolean;
      /** @description Must be set if adding a required field. A URL field can be templated using 'mustache' format where the template parameter refers to a field of the parent object. e.g. for a Job, {{Name}} will be translated to the value of Job.Name */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /**
       * @description The maximum number of characters that are allowed.
       * @default 255
       */
      maxLength?: number;
    };
    NewStandaloneCustomFieldColumnPicklist: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /** @description A non-empty array of key-value pairs. The order they are provided will be the order they are displayed. */
      items: string[][];
    };
    NewStandaloneCustomFieldColumnMultiPicklist: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: string[];
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /** @description A non-empty array of key-value pairs. The order they are provided will be the order they are displayed. */
      items: string[][];
    };
    NewStandaloneCustomFieldColumnInt: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @default false */
      unique?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: number;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
    };
    NewStandaloneCustomFieldColumnDecimal: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /** @default false */
      unique?: boolean;
      /** @description Must be set if adding a required field */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
      /** @description The total number of digits that are allowed. For example, the number 123.45 has a precision of 5. The minimum value is 1 and the maximum value is 18. */
      precision?: number;
      /** @description The number of digits to the right of the decimal point that are allowed. For example, the number 123.45 has a scale of 2. The maximum value is one less than the precision. */
      scale?: number;
    };
    NewStandaloneCustomFieldColumnBoolean: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      default: boolean;
    };
    NewStandaloneCustomFieldColumnDate: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /**
       * Format: date
       * @description Must be set if adding a required field
       */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
    };
    NewStandaloneCustomFieldColumnDateTime: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /**
       * Format: date-time
       * @description Must be set if adding a required field
       */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
    };
    NewStandaloneCustomFieldColumnTime: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /**
       * Format: time
       * @description Must be set if adding a required field
       */
      defaultValue?: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
    };
    NewStandaloneCustomFieldColumnReference: components["schemas"]["NewStandaloneCustomFieldColumn"] & {
      /** @default false */
      required?: boolean;
      /**
       * Format: uuid
       * @description Must be set if adding a required field
       */
      defaultValue?: string;
      /** @description The name of the schema to link to. */
      referenceSchemaName: string;
      /**
       * @description Is the default value only used when creating the field
       * @default false
       */
      temporaryDefaultValue?: boolean;
    };
    StandardSchema: {
      /** @description Internal name */
      name: string;
      /** @description Display name */
      label: string;
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      mapping: string;
    };
    BasicObjectMetadata: {
      /** @description Display name */
      label: string;
      /** @description Display name when used in a plural context */
      labelPlural?: string;
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      mapping: string;
      /** @description The name of the object in the Skedulo system. Null if the field is not defined in Skedulo. */
      name?: string | null;
    };
    ObjectMetadata: {
      /** @description Display name */
      label: string;
      /** @description Display name when used in a plural context */
      labelPlural?: string;
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      mapping: string;
      /** @description The name of the object in the Skedulo system. Null if the field is not defined in Skedulo. */
      name?: string | null;
      fields: components["schemas"]["FieldMetadata"][];
      /** @description Relationships that reference this schema */
      relationships: components["schemas"]["ObjectMetadataRelationship"][];
    };
    FieldMetadata: {
      /** @description Display name */
      label: string;
      /** @description The name of the field in the remote system (eg. Field__c for Salesforce) */
      mapping: string;
      /** @description The name of the field in the Skedulo system. Null if the field is not defined in Skedulo. */
      name?: string | null;
      /** @enum {string} */
      type:
        | "string"
        | "id"
        | "calculated"
        | "email"
        | "encryptedstring"
        | "reference"
        | "textarea"
        | "htmltextarea"
        | "combobox"
        | "multipicklist"
        | "picklist"
        | "phone"
        | "url"
        | "int"
        | "double"
        | "decimal"
        | "currency"
        | "percent"
        | "duration"
        | "time"
        | "date"
        | "datetime"
        | "boolean";
      nillable: boolean;
      /** @description The allowed length of the field. Possibly returns 0 in certain cases as a fallback value. Deprecated in favour of 'maxLength'. */
      length: number;
      /** @description The maximum allowed length of the field. Can return null if a maximum length does not apply. */
      maxLength?: number;
      /** @description The total number of digits that are allowed. For example, the number 123.45 has a precision of 5. */
      precision?: number;
      /** @description The number of digits to the right of the decimal point that are allowed. For example, the number 123.45 has a scale of 2. */
      scale?: number;
      upsertKey: boolean;
      unique: boolean;
      /** @description Deprecated in favour of 'accessMode' which contains more information about how a field can be accessed */
      readOnly: boolean;
      /** @enum {string} */
      accessMode: "read_only" | "read_write" | "insert_only" | "update_only";
      relationship?: components["schemas"]["FieldMetadataRelationship"];
      values: components["schemas"]["FieldMetadataValue"][];
    };
    FieldMetadataRelationship: {
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      schemaMapping: string;
      /** @description The name of the relationship in the remote system (eg. Field__r for Salesforce) */
      mapping: string;
    };
    FieldMetadataValue: {
      label: string;
      value: string;
      active: boolean;
      defaultValue: boolean;
    };
    ObjectMetadataRelationship: {
      /** @description The name of the schema in the remote system (eg. Schema__c for Salesforce) */
      schemaMapping: string;
      /** @description The name of the relationship in the remote system (eg. Field__r for Salesforce) */
      mapping: string;
      /** @description The name of the field in the remote system (eg. Field__c for Salesforce) */
      fieldMapping: string;
    };
    ObjectPermissionMetadata: {
      /** @description True if the current user has permission to read from this object */
      read: boolean;
      /** @description True if the current user has permission to create a record in this object */
      create: boolean;
      /** @description True if the current user has permission to update a record in this object */
      update: boolean;
      /** @description True if the current user has permission to delete a record in this object */
      delete: boolean;
      /** @description Fields of the object keyed by their name */
      fields: {
        [key: string]: components["schemas"]["FieldPermissionMetadata"];
      };
    };
    FieldPermissionMetadata: {
      /** @description True if the current user has permission to read from this field */
      read: boolean;
      /** @description True if the current user has permission to insert a value into this field */
      create: boolean;
      /** @description True if the current user has permission to update a value in this field */
      update: boolean;
    };
    PicklistValue: {
      value: string;
      label: string;
      active: boolean;
      defaultValue: boolean;
      controller?: string;
      controllingField?: string;
      validFor: string[];
    };
    VocabularyItem: {
      label: string;
      value: string;
      active: boolean;
      defaultValue: boolean;
      controllingField?: string;
      validFor: string[];
    };
    ModifiedVocabularyItem: {
      label?: string;
      value?: string;
      active?: boolean;
      defaultValue?: boolean;
    };
    FieldDependencyKeyInput: {
      schemaName: string;
      dependentField: string;
      controllingField: string;
    };
    FieldDependencyInput: {
      schemaName: string;
      dependentField: string;
      controllingField: string;
      entries: components["schemas"]["FieldDependencyEntry"][];
    };
    FieldDependencyEntryInput: {
      schemaName: string;
      dependentField: string;
      controllingField: string;
      entry: components["schemas"]["FieldDependencyEntry"];
    };
    FieldDependencyEntry: {
      dependentValue: string;
      controllingValue: string;
    };
    UserMetadata: {
      id: string;
      email: string;
      username: string;
      fullName: string;
      profileId: string;
      roleId: string;
      orgName: string;
      orgId: string;
      sfdcDomain: string;
      isSkeduloScheduler: boolean;
      isSkeduloUser: boolean;
      isSkeduloAdmin: boolean;
      userroles: string;
      smallPhotoUrl?: string;
      category?: string;
      resourceId?: string;
      latitude?: number;
      longitude?: number;
      address?: string;
      timezone?: string;
      country?: string;
      teamMetadata?: components["schemas"]["TeamMetadata"];
    };
    TeamMetadata: {
      id: string;
      /** @description Primary name of the team. This is always the subdomain part of the team's custom Skedulo domain */
      name: string;
      description: string;
      /** @enum {string} */
      vendor: "salesforce" | "servicenow" | "skedulo";
      orgId: string;
      /** @description The customer name. */
      customer?: string;
    };
    ResultOKCustomFields: {
      result: components["schemas"]["CustomField"][];
    };
    ResultOKCustomSchemas: {
      result: components["schemas"]["CustomSchema"][];
    };
    ResultOKStandardSchemas: {
      result: components["schemas"]["StandardSchema"][];
    };
    Error: {
      errorType: string;
      message: string;
    };
  };
}

export interface operations {
  standardSchemas: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKStandardSchemas"];
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listSchemas: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKCustomSchemas"];
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  upsertSchemas: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKCustomSchemas"];
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** custom schemas */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomSchemaInput"][];
      };
    };
  };
  deleteSchema: {
    parameters: {
      path: {
        /** Identifier of the schema to delete */
        schemaId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  listFields: {
    parameters: {
      query: {
        /** Optional comma separated string of schemas to filter the results for */
        schemas?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKCustomFields"];
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  upsertFields: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ResultOKCustomFields"];
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** custom fields */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomFieldInput"][];
      };
    };
  };
  deleteField: {
    parameters: {
      path: {
        /** Identifier of the field to delete */
        fieldId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  fetchVocabularies: {
    parameters: {
      query: {
        /** Names of schemas to fetch vocabularies for in comma separated format. If not provided all vocabularies are returned. */
        names?: string;
        /** If set to true the cache is replaced with a new value. Has no effect if 'names' are provided as they are not cached. */
        force?: boolean;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            result: {
              [key: string]: {
                [key: string]: components["schemas"]["PicklistValue"][];
              };
            };
          };
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  fetchAllObjectMetadata: {
    parameters: {};
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            result: components["schemas"]["BasicObjectMetadata"][];
          };
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  fetchObjectMetadata: {
    parameters: {
      path: {
        /** The mapping to return metadata for */
        mapping: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            result: components["schemas"]["ObjectMetadata"][];
          };
        };
      };
      /** if the object does not exist */
      404: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  fetchPermissions: {
    parameters: {
      path: {
        /** A non-empty comma separated string of object names to fetch permission metadata for */
        names: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @description Object permission metadata keyed by the object name */
            result?: {
              [key: string]: components["schemas"]["ObjectPermissionMetadata"];
            };
          };
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  vocabularyFetch: {
    parameters: {
      path: {
        /** Name of the schema that the vocabulary field belongs to */
        schemaName: string;
        /** Name of a vocabulary field */
        fieldName: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: components["schemas"]["VocabularyItem"][];
          };
        };
      };
      /** If the field does not exist or is not a vocabulary field */
      400: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  vocabularyCreate: {
    parameters: {
      path: {
        /** Name of the schema that the vocabulary field belongs to */
        schemaName: string;
        /** Name of a vocabulary field */
        fieldName: string;
      };
    };
    responses: {
      /** The item was added */
      200: unknown;
      /** If the field does not exist or is not a vocabulary field */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** An item with that value already exists */
      409: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The item to add */
    requestBody: {
      content: {
        "application/json": components["schemas"]["VocabularyItem"];
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  vocabularyUpdate: {
    parameters: {
      path: {
        /** Name of the schema that the vocabulary field belongs to */
        schemaName: string;
        /** Name of a vocabulary field */
        fieldName: string;
        /** Value of the vocabulary item to modify */
        value: string;
      };
    };
    responses: {
      /** The item was updated */
      200: unknown;
      /** If the field does not exist or is not a vocabulary field */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The item to modify */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ModifiedVocabularyItem"];
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  vocabularyDeactivate: {
    parameters: {
      path: {
        /** Name of the schema that the vocabulary field belongs to */
        schemaName: string;
        /** Name of a vocabulary field */
        fieldName: string;
        /** Vocabulary item value to deactivate */
        value: string;
      };
    };
    responses: {
      /** The item was deactivated */
      200: unknown;
      /** If the field does not exist or is not a vocabulary field */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  upsertFieldDependency: {
    responses: {
      /** The dependency relationship was created or updated */
      200: unknown;
      /** If fields or entries provided were invalid */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The dependency relationship to be created or updated */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FieldDependencyInput"];
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  deleteFieldDependency: {
    responses: {
      /** The dependency relationship was removed */
      200: unknown;
      /** If fields provided were invalid */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The dependency relationship to be removed */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FieldDependencyKeyInput"];
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  addFieldDependencyEntry: {
    responses: {
      /** The dependency relationship was created or updated */
      200: unknown;
      /** If fields or entry provided were invalid */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The dependency relationship to be created or updated */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FieldDependencyEntryInput"];
      };
    };
  };
  /** You must be an administrator in order to use this endpoint */
  deleteFieldDependencyEntry: {
    responses: {
      /** The dependency relationship was removed */
      200: unknown;
      /** If fields or entry provided were invalid */
      400: unknown;
      /** If the user is not an administrator */
      403: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** The dependency relationship to be removed */
    requestBody: {
      content: {
        "application/json": components["schemas"]["FieldDependencyKeyInput"];
      };
    };
  };
  /** Deprecated: use the /auth/metadata/user endpoint instead */
  userMetadata: {
    responses: {
      /** The current users metadata */
      200: {
        content: {
          "application/json": {
            result?: components["schemas"]["UserMetadata"];
          };
        };
      };
    };
  };
  standaloneCreateSchema: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            result: {
              schema: components["schemas"]["CustomSchema"];
              fields: components["schemas"]["CustomField"][];
            };
          };
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** standalone custom schema */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewStandaloneCustomSchema"];
      };
    };
  };
  /** This will remove the schema along with all data contained within it */
  standaloneDeleteSchema: {
    parameters: {
      path: {
        /** Identifier of the schema to delete */
        schemaId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Enable the tracking of row inserts, updates and deletes. Changes are available via GraphQL subscriptions and webhooks. */
  standaloneTrackSchema: {
    parameters: {
      path: {
        /** Identifier of the schema to track */
        schemaId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Disable the tracking of row inserts, updates and deletes for a custom schema. */
  standaloneUntrackSchema: {
    parameters: {
      path: {
        /** Identifier of the schema to untrack */
        schemaId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  standaloneCreateField: {
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": {
            result: components["schemas"]["CustomField"];
          };
        };
      };
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    /** standalone custom field */
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewStandaloneCustomField"];
      };
    };
  };
  /** This will remove the field along with any data it contained */
  standaloneDeleteField: {
    parameters: {
      path: {
        /** Identifier of the field to delete */
        fieldId: string;
      };
    };
    responses: {
      /** successful operation */
      200: unknown;
      /** Unexpected error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}

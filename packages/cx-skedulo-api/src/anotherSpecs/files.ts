/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/attachment/{fileId}": {
    get: operations["downloadFile"];
    put: operations["renameFile"];
    delete: operations["deleteFile"];
  };
  "/direct/{userId}/{fileId}": {
    get: operations["downloadFileDirect"];
  };
  "/direct/{userId}": {
    get: operations["getAvatarDirect"];
  };
  "/sf_avatar/{vendorUserId}": {
    get: operations["getAvatarWithContextUser"];
  };
  "/attachments": {
    get: operations["getFiles"];
  };
  "/attachments/{parentId}": {
    get: operations["getFilesSingle"];
    put: operations["uploadReturnOldMeta"];
    post: operations["uploadReturnNewMeta"];
  };
  "/avatar": {
    get: operations["getAvatarFor"];
  };
}

export interface components {
  schemas: {
    ApiResults: {
      result?: { [key: string]: unknown }[];
    };
    ApiResultsFileMetaMap: {
      [key: string]: components["schemas"]["FileMetaOld"][];
    };
    ApiResultsFileMeta: {
      result?: components["schemas"]["FileMetaOld"][];
    };
    FileMetaOld: {
      filePtr: string;
      size?: string;
      contentType?: string;
      fileName: string;
      /** Format: date-time */
      uploadDate: string;
      parentId: string;
      createdBy?: string;
      createdById?: string;
      description?: string;
      downloadUrl?: string;
    };
    FileMeta: {
      id: string;
      parentId: string;
      contentType?: string;
      name: string;
      /** Format: date-time */
      createdDate: string;
      contentLength?: string;
      createdById: string;
      description?: string;
      downloadUrl?: string;
    };
    DeletedApiResult: {
      deleted: string;
    };
    FileSaveResult: {
      id: string;
      success: boolean;
    };
    ApiResult: {
      result?: { [key: string]: unknown };
    };
    ApiResultFileMetaOld: {
      result?: components["schemas"]["FileMetaOld"];
    };
    ApiResultFileMeta: {
      result?: components["schemas"]["FileMeta"];
    };
    AvatarResults: { [key: string]: string };
    AvatarError: {
      errorType: string;
      errorMsg: string;
    };
    AvatarErrors: { [key: string]: components["schemas"]["AvatarError"] };
    AvatarAuth: {
      signature: string;
      expiry: string;
    };
    AvatarAuths: { [key: string]: components["schemas"]["AvatarAuth"] };
    AvatarFullResult: {
      result?: components["schemas"]["AvatarResults"];
      errors?: components["schemas"]["AvatarErrors"];
      extra?: components["schemas"]["AvatarAuths"];
    };
  };
}

export interface operations {
  downloadFile: {
    parameters: {
      path: {
        /** Identifier of the file to retrieve */
        fileId: string;
      };
      query: {
        /** True to force the browser to download the file, false to inline the content */
        attach?: boolean;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Attachment with the given identifier is not found */
      404: unknown;
    };
  };
  renameFile: {
    parameters: {
      path: {
        /** Identifier of the file to rename */
        fileId: string;
      };
      query: {
        /** The new name of the file */
        name: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["FileSaveResult"];
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Attachment with the given identifier is not found */
      404: unknown;
    };
  };
  deleteFile: {
    parameters: {
      path: {
        /** Identifier of the attachment to delete */
        fileId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["DeletedApiResult"];
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Attachment with the given identifier is not found */
      404: unknown;
    };
  };
  downloadFileDirect: {
    parameters: {
      path: {
        /** Skedulo userId of the requesting user */
        userId: string;
        /** Id of the attachment */
        fileId: string;
      };
      query: {
        /** The instant beyond which this URL will be invalid */
        expiry: string;
        /** A cryptographic signature to validate the integrity of this URL */
        signature: string;
        /** True to force the browser to download the file, false to inline the content */
        attach?: boolean;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Invalid signature or past expiry date */
      401: unknown;
      /** Attachment with the given identifier is not found */
      404: unknown;
    };
  };
  getAvatarDirect: {
    parameters: {
      path: {
        /** Skedulo userId of the requesting user */
        userId: string;
      };
      query: {
        /** The instant beyond which this URL will be invalid */
        expiry?: string;
        /** A cryptographic signature to validate the integrity of this URL */
        signature?: string;
        /** Requested image size. Return thumbnail image for 'small' or 'thumbnail' input, full image otherwise */
        size_hint?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Invalid signature or past expiry date */
      401: unknown;
    };
  };
  getAvatarWithContextUser: {
    parameters: {
      path: {
        /** Salesforce userId of the user having the avatar image */
        vendorUserId: string;
      };
      query: {
        /** Full Auth0 userId of the user who generated this direct link */
        generating_userId: string;
        /** The instant beyond which this URL will be invalid */
        expiry?: string;
        /** A cryptographic signature to validate the integrity of this URL */
        signature?: string;
        /** Requested image size. Return thumbnail image for 'small' or 'thumbnail' input, full image otherwise */
        size_hint?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** Invalid data supplied */
      400: unknown;
      /** Invalid signature or past expiry date */
      401: unknown;
    };
  };
  getFiles: {
    parameters: {
      query: {
        /** Comma-separated identifiers of the parents to retrieve attachments for */
        parent_ids: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResultsFileMetaMap"];
        };
      };
      /** Resource with parent identifier not found */
      404: unknown;
    };
  };
  getFilesSingle: {
    parameters: {
      path: {
        /** Identifier of the parent to retrieve attachments for */
        parentId: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResultsFileMeta"];
        };
      };
      /** Resource with parent identifier not found */
      404: unknown;
    };
  };
  uploadReturnOldMeta: {
    parameters: {
      path: {
        /** Identifier of the parent to add the attachment to */
        parentId: string;
      };
      header: {
        /** The name of the attachment */
        "X-Skedulo-Name": string;
        /** An optional description of the attachment */
        "X-Skedulo-Description"?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResultFileMetaOld"];
        };
      };
      /** Invalid data supplied */
      400: unknown;
    };
  };
  uploadReturnNewMeta: {
    parameters: {
      path: {
        /** Identifier of the parent to add the attachment to */
        parentId: string;
      };
      header: {
        /** The name of the attachment */
        "X-Skedulo-Name": string;
        /** An optional description of the attachment */
        "X-Skedulo-Description"?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["ApiResultFileMeta"];
        };
      };
      /** Invalid data supplied */
      400: unknown;
    };
  };
  getAvatarFor: {
    parameters: {
      query: {
        /** Comma-separated identifiers of the users to get the avatar urls for */
        user_ids: string;
        /** Requested image size. Return thumbnail image for 'small' or 'thumbnail' input, full image otherwise */
        size_hint?: string;
      };
    };
    responses: {
      /** successful operation */
      200: {
        content: {
          "application/json": components["schemas"]["AvatarFullResult"];
        };
      };
      /** User with the given identifier not found */
      404: unknown;
    };
  };
}

export interface external {}

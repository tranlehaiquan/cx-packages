/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/graphql": {
    /**
     * Run queries and mutations against the schema using the `/graphql/graphql` endpoint.
     *
     * Queries and mutations are `POST` operations with a GraphQL payload that defines shape of the query or mutation you want to make against the schema. A mutation with multiple operations is executed as an atomic transaction.
     *
     * The response may include standard Skedulo objects and custom objects and fields you have defined.
     *
     * To improve the performance of query operations on Skedulo Platform, set the header X-Skedulo-Read-Only=true. This will execute against a read replica database and will produce an error if any write operation is attempted. Beware of race conditions - there may be a small delay between a write being executed and the data being available on the read replica.
     */
    post: operations["graphql"];
  };
  "/graphql/batch": {
    /**
     * GraphQL batching involves sending multiple queries or mutations to the server in a single request. This reduces the number of server round trips to fetch data, which makes interaction more efficient.
     *
     * See https://blog.apollographql.com/query-batching-in-apollo-63acfd859862 for more information
     */
    post: operations["graphqlBatch"];
  };
  "/subscriptions": {
    /**
     * GraphQL Subscriptions via Apollo `graphql-ws` protocol.
     *
     * * Your tenant must have an API user.
     *
     * * You must be a 'Scheduler' or 'Administrator'.
     *
     * The `Authorization` header must be passed in the `connection_init` message.
     */
    get: operations["graphqlSubscriptions"];
  };
  "/schema": {
    /** Retrieve the Skedulo GraphQL schema. */
    get: operations["graphqlSchema"];
  };
}

export interface components {
  schemas: {
    GraphQLResult: {
      /** @description Query or mutation result. */
      data?: { [key: string]: unknown };
      errors?: components["schemas"]["GraphQLError"][];
    };
    /** @description errors */
    GraphQLError: {
      /** @description Error message. */
      message?: string;
      location?: {
        /** @description Line Number */
        line?: string;
        /** @description Column number */
        column?: string;
      };
    };
    Error: {
      errorType: string;
      message: string;
      errorId?: string;
    };
  };
}

export interface operations {
  /**
   * Run queries and mutations against the schema using the `/graphql/graphql` endpoint.
   *
   * Queries and mutations are `POST` operations with a GraphQL payload that defines shape of the query or mutation you want to make against the schema. A mutation with multiple operations is executed as an atomic transaction.
   *
   * The response may include standard Skedulo objects and custom objects and fields you have defined.
   *
   * To improve the performance of query operations on Skedulo Platform, set the header X-Skedulo-Read-Only=true. This will execute against a read replica database and will produce an error if any write operation is attempted. Beware of race conditions - there may be a small delay between a write being executed and the data being available on the read replica.
   */
  graphql: {
    responses: {
      /** Query or Mutation result was returned */
      200: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Query or Mutation failed, an error is returned.  The `data` property will be null in this case. */
      400: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Authentication/Authorization failed */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * GraphQL batching involves sending multiple queries or mutations to the server in a single request. This reduces the number of server round trips to fetch data, which makes interaction more efficient.
   *
   * See https://blog.apollographql.com/query-batching-in-apollo-63acfd859862 for more information
   */
  graphqlBatch: {
    responses: {
      /** An array of Query or Mutation results corresponding to the input */
      200: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"][];
        };
      };
      /** Authentication/Authorization failed */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * GraphQL Subscriptions via Apollo `graphql-ws` protocol.
   *
   * * Your tenant must have an API user.
   *
   * * You must be a 'Scheduler' or 'Administrator'.
   *
   * The `Authorization` header must be passed in the `connection_init` message.
   */
  graphqlSubscriptions: {
    responses: {
      /** WebSocket connection succeeded */
      101: {
        content: {
          "*/*": components["schemas"]["GraphQLResult"];
        };
      };
      /** If the WebSocket protocol was not 'graphql-ws' */
      400: {
        content: {
          "*/*": components["schemas"]["GraphQLResult"];
        };
      };
      /** Error */
      default: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve the Skedulo GraphQL schema. */
  graphqlSchema: {
    responses: {
      /** Schema was returned */
      200: unknown;
      /** Authentication/Authorization failed */
      401: {
        content: {
          "application/text": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/text": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}

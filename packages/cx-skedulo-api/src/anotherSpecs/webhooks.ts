/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/webhooks/schema": {
    /** Retrieve the GraphQL schema that is used for webhooks with type `graphql`. */
    get: operations["webhookGraphQLSchema"];
  };
  "/webhooks/graphql": {
    /** Perform an introspection query against the GraphQL query that is used for webhooks with type `graphql`. */
    post: operations["webhookGraphQLQuery"];
  };
  "/webhooks/deferred/schema": {
    /** Retrieve the GraphQL schema that is used for webhooks with type `graphql_deferred`. */
    get: operations["webhookDeferredGraphQLSchema"];
  };
  "/webhooks/deferred/graphql": {
    /** Perform an introspection query against the GraphQL query that is used for webhooks with type `graphql_deferred`. */
    post: operations["webhookDeferredGraphQLQuery"];
  };
  "/webhooks": {
    /** Fetch all existing webhooks. */
    get: operations["webhooksFetch"];
    /** Establish a new webhook. */
    post: operations["webhooksCreate"];
  };
  "/webhooks/{id}": {
    /** Delete a webhook using the webhook ID. */
    delete: operations["webhooksDelete"];
  };
}

export interface components {
  schemas: {
    GraphQLResult: {
      /** @description Query result */
      data?: { [key: string]: unknown };
      errors?: components["schemas"]["GraphQLError"][];
    };
    /** @description errors */
    GraphQLError: {
      /** @description Error message. */
      message?: string;
      location?: {
        /** @description Line Number */
        line?: string;
        /** @description Column number */
        column?: string;
      };
    };
    Webhook:
      | components["schemas"]["WebhookGraphQL"]
      | components["schemas"]["WebhookGraphQLDeferred"]
      | components["schemas"]["WebhookScheduled"]
      | components["schemas"]["WebhookInboundSMS"];
    WebhookBase: {
      /** Format: uuid */
      id: string;
      name: string;
      /** Format: uri */
      url: string;
      headers: { [key: string]: unknown };
    } & {
      type: unknown;
    };
    WebhookGraphQL: components["schemas"]["WebhookBase"] & {
      /** @enum {string} */
      type: "graphql";
      query: string;
    };
    WebhookGraphQLDeferred: components["schemas"]["WebhookBase"] & {
      /** @enum {string} */
      type: "graphql_deferred";
      filter?: string;
      name: string;
      offset: components["schemas"]["WebhookGraphQLDeferredOffset"];
      query: string;
    };
    WebhookGraphQLDeferredOffset:
      | number
      | components["schemas"]["WebhookGraphQLDeferredOffsetField"];
    WebhookGraphQLDeferredOffsetField: {
      fieldName: string;
      /** Format: int64 */
      default?: number;
    };
    WebhookScheduled: components["schemas"]["WebhookBase"] & {
      /** @enum {string} */
      type: "scheduled";
      cron: string;
    };
    WebhookInboundSMS: components["schemas"]["WebhookBase"] & {
      /** @enum {string} */
      type: "inbound_sms";
    };
    NewWebhook:
      | components["schemas"]["WebhookGraphQL"]
      | components["schemas"]["WebhookGraphQLDeferred"]
      | components["schemas"]["WebhookScheduled"]
      | components["schemas"]["WebhookInboundSMS"];
    NewWebhookBase: {
      name: string;
      /** Format: uri */
      url: string;
      /**
       * @description A map of headers that are sent for each request
       * @example {
       *   "My-Auth-Header": "my_secret_token"
       * }
       */
      headers?: { [key: string]: unknown };
    };
    NewWebhookGraphQL: components["schemas"]["NewWebhookBase"] & {
      /** @enum {string} */
      type: "graphql";
      query: string;
    };
    NewWebhookGraphQLDeferred: components["schemas"]["NewWebhookBase"] & {
      /** @enum {string} */
      type: "graphql_deferred";
      /** @description A filter that if returns false cancels the deferred task. */
      filter?: string;
      /** @description A time field on the schema which determines when the deferred task will run. */
      name: string;
      offset: components["schemas"]["NewWebhookGraphQLDeferredOffset"];
      query: string;
    };
    NewWebhookGraphQLDeferredOffset:
      | number
      | components["schemas"]["NewWebhookGraphQLDeferredOffsetField"];
    NewWebhookGraphQLDeferredOffsetField: {
      /** @description The name of a field that has a type of Int, Decimal or Duration */
      field: string;
      /**
       * Format: int64
       * @description A default value to use as the offset if the field has no value (in milliseconds)
       */
      default?: number;
    };
    NewWebhookScheduled: components["schemas"]["NewWebhookBase"] & {
      /** @enum {string} */
      type: "scheduled";
      /** @description A unix cron expression */
      cron: string;
    };
    NewWebhookInboundSMS: components["schemas"]["NewWebhookBase"] & {
      /** @enum {string} */
      type: "inbound_sms";
    };
    Error: {
      errorType: string;
      message: string;
      errorId?: string;
    };
  };
}

export interface operations {
  /** Retrieve the GraphQL schema that is used for webhooks with type `graphql`. */
  webhookGraphQLSchema: {
    responses: {
      /** Schema was returned. */
      200: unknown;
      /** Error */
      default: {
        content: {
          "application/text": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Perform an introspection query against the GraphQL query that is used for webhooks with type `graphql`. */
  webhookGraphQLQuery: {
    responses: {
      /** Introspection query was returned. */
      200: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Invalid query */
      400: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Retrieve the GraphQL schema that is used for webhooks with type `graphql_deferred`. */
  webhookDeferredGraphQLSchema: {
    responses: {
      /** Schema was returned. */
      200: unknown;
      /** Error */
      default: {
        content: {
          "application/text": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Perform an introspection query against the GraphQL query that is used for webhooks with type `graphql_deferred`. */
  webhookDeferredGraphQLQuery: {
    responses: {
      /** Introspection query was returned. */
      200: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Invalid query */
      400: {
        content: {
          "application/json": components["schemas"]["GraphQLResult"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Fetch all existing webhooks. */
  webhooksFetch: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": {
            result: components["schemas"]["Webhook"][];
          };
        };
      };
      /** If the user is not an administrator */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Establish a new webhook. */
  webhooksCreate: {
    responses: {
      /** success */
      200: {
        content: {
          "application/json": {
            result: components["schemas"]["Webhook"][];
          };
        };
      };
      /** If the user is not an administrator. */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["NewWebhook"];
      };
    };
  };
  /** Delete a webhook using the webhook ID. */
  webhooksDelete: {
    parameters: {
      path: {
        /** Identifier of the webhook to delete. */
        id: string;
      };
    };
    responses: {
      /** success */
      200: unknown;
      /** If the user is not an administrator. */
      403: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
      /** Error */
      default: {
        content: {
          "*/*": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
